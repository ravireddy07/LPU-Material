// reading from a program

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
int main()
{
	FILE *rd;
	char buffer[500];
	int n;
	memset(buffer,'\0',sizeof(buffer));
	rd=popen("ls p*","r");
	//if(rd !=NULL)
	n=fread(buffer,sizeof(char),500,rd);
	if(n>0)
	printf("%s",buffer);
	pclose(rd);
}



// writing to a program

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
int main()
{
	FILE *rd;
	char buffer[500];
	int n;
	sprintf(buffer,"name first");
	rd=popen("wc -c","w");
	if(rd !=NULL)
	fwrite(buffer,sizeof(char),strlen(buffer),rd);
	pclose(rd); //required
}



// use of pipe function when both the processes share same code (parent and child)

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
int main()
{
	int fd[2],n;
	char buffer[100];
	pid_t p;
	pipe(fd);
	p=fork();
	if(p>0)
	{
		close(fd[0]);
		printf("Passing value to child\n");
		write(fd[1],"hello\n",6);
		wait();
		
	}
	else
	{
		close(fd[1]);		
		n=read(fd[0],buffer,100);
		write(1,buffer,n);
	}
exit(0);
}


// use of pipes and exec. When two processes have different code. You need to pass the file descriptor of pipe to another program

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
int main()
{
	int fd[2],n;
	char buffer[100];
	pid_t p;
	pipe(fd);
	p=fork();
	if(p>0)
	{
		
		printf("Passing value to child\n");
		write(fd[1],"hello\n",6);
		printf("Process id is : %d\n",getpid());
		wait();
		
	}
	else
	{
		
		sprintf(buffer,"%d",fd[0]);
		printf("%s\n",buffer);
		(void)execlp("/home/baljit/pipes4","/home/baljit/pipes4",buffer,(char *)0);
		exit(EXIT_FAILURE);
	}
exit(0);
}



#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<string.h>
int main(int argc, char *argv[])
{
	int d;
	char buffer[100];
	int fd;
	memset(buffer,'\0',sizeof(buffer));
	sscanf(argv[1],"%d",&fd);
	d=read(fd,buffer,100);
	printf("Process %d read %d bytes: %s",getpid(),d,buffer);
}



//to create a named pipe(FIFO)

#include<unistd.h>
#include<stdlib.h>
#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>
int main()
{
	int res=mkfifo("fifo1",0777);
	if (res==0)
	printf("fifo created\n");
}



//opening FIFO file in RDONLY and NONBLOCK mode . This program will work with the next program. Run this in background

#include<unistd.h>
#include<stdlib.h>
#include<stdio.h>
#include<fcntl.h>
#include<sys/types.h>
#include<sys/stat.h>
int main()
{
	int res;
	//if(access("fifo1",F_OK)==-1)
		//mkfifo("fifo1",0777);
	printf("Process %d opening FIFO\n",getpid());
	res=open("fifo1",O_RDONLY|O_NONBLOCK);
	printf("Process %d result %d\n",getpid(),res);
	sleep(5);
	if(res!=-1)
	(void)close(res);
	printf("Process %d finished\n",getpid());
	exit(EXIT_SUCCESS);
}




#include<unistd.h>
#include<stdlib.h>
#include<stdio.h>
#include<fcntl.h>
#include<sys/types.h>
#include<sys/stat.h>
int main()
{
	int res;
	//if(access("fifo1",F_OK)==-1)
	//	mkfifo("fifo1",0777);
	printf("Process %d opening FIFO\n",getpid());
	res=open("fifo1",O_WRONLY|O_NONBLOCK);
	printf("Process %d result %d\n",getpid(),res);
	sleep(5);
	if(res!=-1)
	(void)close(res);
	printf("Process %d finished\n",getpid());
	exit(EXIT_SUCCESS);

}




//Inter process communication in unrelated processes with FIFOs. Use next program along with this to  for demonstration
#include<unistd.h>
#include<stdlib.h>
#include<stdio.h>
#include<fcntl.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<limits.h>
int main()
{
	int res,n;
	char buffer[100];
	//if(access("fifo1",F_OK)==-1)
	//	mkfifo("fifo1",0777);
	printf("Process %d opening FIFO\n",getpid());
	res=open("fifo1",O_WRONLY);
	n=write(res,"written",7);
	if(n==-1)
		printf("error\n");
	(void)close(res);
	printf("Process %d finished\n",getpid());

}





#include<unistd.h>
#include<stdlib.h>
#include<stdio.h>
#include<fcntl.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<limits.h>
int main()
{
	int res,n;
	char buffer[100];
	//if(access("fifo1",F_OK)==-1)
	//	mkfifo("fifo1",0777);
	printf("Process %d opening FIFO\n",getpid());
	
	res=open("fifo1",O_RDONLY);
	
	n=read(res,buffer,100);
	
	(void)close(res);
	printf("Total bytes read: %d\n",n);
	
	
	printf("Process %d finished\n",getpid());
	exit(EXIT_SUCCESS);
}
