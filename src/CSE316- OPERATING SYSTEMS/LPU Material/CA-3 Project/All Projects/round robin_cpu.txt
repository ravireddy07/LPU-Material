ROUND ROBIN SCHEDULING 

Write a C program to implement the various process scheduling mechanisms such as Round Robin Scheduling.

Algorithm for RR

Step 1: Start the process
Step 2: Accept the number of processes in the ready Queue and time quantum (or) time slice
Step 3: For each process in the ready Q, assign the process id and accept the CPU burst time
Step 4: Calculate the no. of time slices for each process where
	No. of time slice for process(n) = burst time process(n)/time  slice
Step 5: If the burst time is less than the time slice then the no. of time slices =1.
Step 6: Consider the ready queue is a circular Q, calculate
(a) Waiting time for process(n) = waiting time of process(n-1)+ burst time of process(n-1 ) + the time difference in getting the CPU from process(n-1)
(b) Turn around time for process(n) = waiting time of process(n) + burst time of process(n)+ the time difference in getting CPU from process(n).
Step 7: Calculate 
(a) Average waiting time = Total waiting Time / Number of process
(b) Average Turnaround time = Total Turnaround Time / Number of process
Step 8: Stop the process













/* ROUND ROBIN SCHEDULING ALGORITHM */


#include<stdio.h>

#include<conio.h>


void main()

{
 int ts,pid[10],need[10],wt[10],tat[10],i,j,n,n1;
 int bt[10],flag[10],ttat=0,twt=0;
 float awt,atat;
 
clrscr();


 printf("\t\t ROUND ROBIN SCHEDULING); 
printf("Enter the number of Processors \n");
 
scanf("%d",&n);

 n1=n;
 
printf("\n Enter the Timeslice \n");
 
scanf("%d",&ts);
 for(i=1;i<=n;i++)

 {
   printf("\n Enter the process ID %d",i);
   
scanf("%d",&pid[i]);
   
printf("\n Enter the Burst Time for the process");
   
scanf("%d",&bt[i]);
   need[i]=bt[i];
 }

 for(i=1;i<=n;i++)
 
{
  flag[i]=1;
  wt[i]=0;
 }
 
while(n!=0)

 {
   for(i=1;i<=n;i++)
   
{
     if(need[i]>=ts)
     
{
       for(j=1;j<=n;j++)
       
{
	  if((i!=j)&&(flag[i]==1)&&(need[j]!=0))
	  
wt[j]+=ts;
       }
      



       
need[i]-=ts;
      
 if(need[i]==0)
      
 {
	 flag[i]=0;
	 n--;
       }
     }
     
else
    
 {
       for(j=1;j<=n;j++)
      
 {
	  if((i!=j)&&(flag[i]==1)&&(need[j]!=0))
	  
wt[j]+=need[i];
       }
       
need[i]=0;
       
n--;
       
flag[i]=0;
  
 }
 }
}

for(i=1;i<=n1;i++)

{
  tat[i]=wt[i]+bt[i];
  
twt=twt+wt[i];
  
ttat=ttat+tat[i];
}

awt=(float)twt/n1;

atat=(float)ttat/n1;


printf("\n\n ROUND ROBIN SCHEDULING ALGORITHM \n\n");

printf("\n\n Process \t Process ID  \t BurstTime \t Waiting Time \t TurnaroundTime \n ");

for(i=1;i<=n1;i++)
{
 
 printf("\n %5d \t %5d \t\t %5d \t\t %5d \t\t %5d \n", i,pid[i],bt[i],wt[i],tat[i]);
}


printf("\n The average Waiting Time=4.2f",awt);

printf("\n The average Turn around Time=4.2f",atat);
getch();
}         

